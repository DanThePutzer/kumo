Description: >
  Daniel Putzer / Server stack for a simple web app

Parameters:
  # - - General Parameters - -
  EnvironmentName:
    Description: Environment name prefix to be identify connected resources in the console and access proper outputs
    Type: String


Resources:

  # - -
  # IAM Profiles
  # - -
  
  UdagramIAM:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdagramS3ReadOnly


  # - -
  # Security Groups
  # - -

  # Security group for web servers
  UdagramWebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Set up HTTP traffic and SSH for web servers in private subnets
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 # HTTP traffic for web communication
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22 # SSH for maintenance and debugging
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0 # All outbound traffic allowed since not really a security risk
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # Security group for load balancer
  UdagramLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Set up HTTP traffic to and from load balancer
      VpcId: 
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 # HTTP traffic for web communication
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  
  # - -
  # Launch Configurations
  # - -

  UdagramLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref UdagramIAM
      ImageId: ami-0b1e2eeb33ce3d66f # Using Amazon Linux AMI 2
      InstanceMonitoring: true|false
      InstanceType: t2.micro # Keeping it free tier to save credits
      KeyName: UdagramPrivateInstances # Key to enable SSH access when online
      SecurityGroups:
        - Ref: UdagramWebServerSecurityGroup
      BlockSizeMappings:
        - DeviceName: '/dev/mnt1'
          Ebs:
            VolumeSize: 10
      UserData:
        Fn::Base64: !Sub
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip


  # - -
  # Auto Scaling Groups
  # - -

  UdagramAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: # Passing subnet references
      - Fn::ImportValue:
          !Sub ${EnvironmentName}-PRI-NETS
      LaunchConfigurationName: !Ref UdagramLaunchConfig
      MaxSize: 6
      MinSize: 4
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Auto Scaling Group
          PropagateAtLaunch: True
      TargetGroupARNs:
      - Ref: UdagramLoadBalancingTargetGroup


  # - -
  # Target Groups
  # - -

  UdagramLoadBalancingTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: / # Healthcheck at root route
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30 # If no reponse within 30 seconds -> unhealthy response
      HealthyThresholdCount: 2 # 2 valid responses deem resource healthy
      Port: 80 # Healthcheck at port 8080...
      Protocol: HTTP # ...for HTTP response
      UnhealthyThresholdCount: 5 # Tries for 5 times every 35 seconds
      TargetGroupAttributes: 
      - Key: slow_start.duration_seconds # Adding slow start to counter timeouts when launching
        Value: 120
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID


  # - -
  # Load Balancers
  # - -

  UdagramLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
        - Ref: UdagramLoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-SN1
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-SN2
  
  # Creating load balancing listener
  UdagramLoadBalancingListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
      - Type: forward
        TargetGroupARn: !Ref UdagramLoadBalancingTargetGroup
      LoadBalancerArn: !Ref UdagramLoadBalancer
      Port: 80
      Protocol: HTTP
  
  # Creating load balancing listener rule
  LoadBalancingListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref UdagramLoadBalancingTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref UdagramLoadBalancingListener
      Priority: 1