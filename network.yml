Description: >
  Daniel Putzer / Network stack for a simple web app

Parameters:
  # - - General Parameters - -
  EnvironmentName:
    Description: Environment name prefix to be identify connected resources in the console
    Type: String

  # - - VPC Parameters - -
  VpcCIDR:
    Description: IP address range of VPC
    Type: String
    Default: 10.0.0.0/16

  # - - Subnet Parameters - -
  Private1CIDR:
    Description: IP address range for PrivateSubnet1
    Type: String

  Private2CIDR:
    Description: IP address range for PrivateSubnet1
    Type: String

  Public1CIDR:
    Description: IP address range for PrivateSubnet1
    Type: String

  Public2CIDR:
    Description: IP address range for PrivateSubnet1
    Type: String


Resources:

  # - -
  # VPC
  # - -
  UdagramVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC
  
  # - -
  # Internet Gateway
  # - -
  UdagramInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Internet Gateway
  # Connecting Internet Gateway to VPC
  UdagramInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref UdagramVPC
      InternetGatewayId: !Ref UdagramInternetGateway


  # - -
  # Subnets
  # - -

  # - - Private Subnets - -
  UdagramPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ''] # Setting different AZs for subnets
      VpcId: !Ref UdagramVPC
      CidrBlock: !Ref Private1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1
  
  UdagramPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ''] # Setting different AZs for subnets
      VpcId: !Ref UdagramVPC
      CidrBlock: !Ref Private2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 2

  # - - Public Subnets - -
  UdagramPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref UdagramVPC
      CidrBlock: !Ref Public1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1

  UdagramPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref UdagramVPC
      CidrBlock: !Ref Public2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 2


  # - -
  # NAT Gateways + Elastic IPs
  # - -

  # - - Elastic IPs - -
  UdagramNat1EIP:
    Type: AWS::EC2::EIP
    DependsOn: UdagramInternetGateway
    Properties:
      Domain: vpc
  
  UdagramNat2EIP:
    Type: AWS::EC2::EIP
    DependsOn: UdagramInternetGateway
    Properties:
      Domain: vpc

  # - - NAT Gateways - -
  UdagramNat1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt UdagramNat1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  UdagramNat2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt UdagramNat2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
  

  # - -
  # Routing
  # - -

  # - - Public Route Table - -
  UdagramPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UdagramVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  # - - Public Routes - -
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdagramPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref UdagramInternetGateway
    
  # - - Public Route Table Associations - -
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdagramPublicSubnet1
      RouteTableId: !Ref UdagramPublicRouteTable

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdagramPublicSubnet2
      RouteTableId: !Ref UdagramPublicRouteTable


  # - - Private Routing Subnet 1 - -
  UdagramPrivateRoutingTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UdagramVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes 1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdagramPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref UdagramNat1
  
  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdagramPrivateSubnet1
      RouteTableId: !Ref UdagramPrivateRoutingTable1

  # - - Private Routing Subnet 2 - -
  UdagramPrivateRoutingTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UdagramVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes 2
  
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdagramPrivateRoutingTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref UdagramNat2

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdagramPrivateSubnet2
      RouteTableId: !Ref UdagramPrivateRoutingTable2



Outputs: